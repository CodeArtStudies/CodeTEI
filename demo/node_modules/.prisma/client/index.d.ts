
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model CodeWork
 * 
 */
export type CodeWork = $Result.DefaultSelection<Prisma.$CodeWorkPayload>
/**
 * Model Explanation
 * 
 */
export type Explanation = $Result.DefaultSelection<Prisma.$ExplanationPayload>
/**
 * Model Execution
 * 
 */
export type Execution = $Result.DefaultSelection<Prisma.$ExecutionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more CodeWorks
 * const codeWorks = await prisma.codeWork.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more CodeWorks
   * const codeWorks = await prisma.codeWork.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.codeWork`: Exposes CRUD operations for the **CodeWork** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CodeWorks
    * const codeWorks = await prisma.codeWork.findMany()
    * ```
    */
  get codeWork(): Prisma.CodeWorkDelegate<ExtArgs>;

  /**
   * `prisma.explanation`: Exposes CRUD operations for the **Explanation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Explanations
    * const explanations = await prisma.explanation.findMany()
    * ```
    */
  get explanation(): Prisma.ExplanationDelegate<ExtArgs>;

  /**
   * `prisma.execution`: Exposes CRUD operations for the **Execution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Executions
    * const executions = await prisma.execution.findMany()
    * ```
    */
  get execution(): Prisma.ExecutionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    CodeWork: 'CodeWork',
    Explanation: 'Explanation',
    Execution: 'Execution'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "codeWork" | "explanation" | "execution"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      CodeWork: {
        payload: Prisma.$CodeWorkPayload<ExtArgs>
        fields: Prisma.CodeWorkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CodeWorkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeWorkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CodeWorkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeWorkPayload>
          }
          findFirst: {
            args: Prisma.CodeWorkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeWorkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CodeWorkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeWorkPayload>
          }
          findMany: {
            args: Prisma.CodeWorkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeWorkPayload>[]
          }
          create: {
            args: Prisma.CodeWorkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeWorkPayload>
          }
          createMany: {
            args: Prisma.CodeWorkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CodeWorkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeWorkPayload>[]
          }
          delete: {
            args: Prisma.CodeWorkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeWorkPayload>
          }
          update: {
            args: Prisma.CodeWorkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeWorkPayload>
          }
          deleteMany: {
            args: Prisma.CodeWorkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CodeWorkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CodeWorkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeWorkPayload>
          }
          aggregate: {
            args: Prisma.CodeWorkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCodeWork>
          }
          groupBy: {
            args: Prisma.CodeWorkGroupByArgs<ExtArgs>
            result: $Utils.Optional<CodeWorkGroupByOutputType>[]
          }
          count: {
            args: Prisma.CodeWorkCountArgs<ExtArgs>
            result: $Utils.Optional<CodeWorkCountAggregateOutputType> | number
          }
        }
      }
      Explanation: {
        payload: Prisma.$ExplanationPayload<ExtArgs>
        fields: Prisma.ExplanationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExplanationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExplanationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>
          }
          findFirst: {
            args: Prisma.ExplanationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExplanationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>
          }
          findMany: {
            args: Prisma.ExplanationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>[]
          }
          create: {
            args: Prisma.ExplanationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>
          }
          createMany: {
            args: Prisma.ExplanationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExplanationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>[]
          }
          delete: {
            args: Prisma.ExplanationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>
          }
          update: {
            args: Prisma.ExplanationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>
          }
          deleteMany: {
            args: Prisma.ExplanationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExplanationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExplanationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>
          }
          aggregate: {
            args: Prisma.ExplanationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExplanation>
          }
          groupBy: {
            args: Prisma.ExplanationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExplanationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExplanationCountArgs<ExtArgs>
            result: $Utils.Optional<ExplanationCountAggregateOutputType> | number
          }
        }
      }
      Execution: {
        payload: Prisma.$ExecutionPayload<ExtArgs>
        fields: Prisma.ExecutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExecutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExecutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExecutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExecutionPayload>
          }
          findFirst: {
            args: Prisma.ExecutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExecutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExecutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExecutionPayload>
          }
          findMany: {
            args: Prisma.ExecutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExecutionPayload>[]
          }
          create: {
            args: Prisma.ExecutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExecutionPayload>
          }
          createMany: {
            args: Prisma.ExecutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExecutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExecutionPayload>[]
          }
          delete: {
            args: Prisma.ExecutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExecutionPayload>
          }
          update: {
            args: Prisma.ExecutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExecutionPayload>
          }
          deleteMany: {
            args: Prisma.ExecutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExecutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExecutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExecutionPayload>
          }
          aggregate: {
            args: Prisma.ExecutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExecution>
          }
          groupBy: {
            args: Prisma.ExecutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExecutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExecutionCountArgs<ExtArgs>
            result: $Utils.Optional<ExecutionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CodeWorkCountOutputType
   */

  export type CodeWorkCountOutputType = {
    explanations: number
    executions: number
  }

  export type CodeWorkCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    explanations?: boolean | CodeWorkCountOutputTypeCountExplanationsArgs
    executions?: boolean | CodeWorkCountOutputTypeCountExecutionsArgs
  }

  // Custom InputTypes
  /**
   * CodeWorkCountOutputType without action
   */
  export type CodeWorkCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeWorkCountOutputType
     */
    select?: CodeWorkCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CodeWorkCountOutputType without action
   */
  export type CodeWorkCountOutputTypeCountExplanationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExplanationWhereInput
  }

  /**
   * CodeWorkCountOutputType without action
   */
  export type CodeWorkCountOutputTypeCountExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExecutionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model CodeWork
   */

  export type AggregateCodeWork = {
    _count: CodeWorkCountAggregateOutputType | null
    _min: CodeWorkMinAggregateOutputType | null
    _max: CodeWorkMaxAggregateOutputType | null
  }

  export type CodeWorkMinAggregateOutputType = {
    id: string | null
    title: string | null
    author: string | null
    sourceCode: string | null
    sha3Hash: string | null
    codeteiXml: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CodeWorkMaxAggregateOutputType = {
    id: string | null
    title: string | null
    author: string | null
    sourceCode: string | null
    sha3Hash: string | null
    codeteiXml: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CodeWorkCountAggregateOutputType = {
    id: number
    title: number
    author: number
    sourceCode: number
    sha3Hash: number
    codeteiXml: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CodeWorkMinAggregateInputType = {
    id?: true
    title?: true
    author?: true
    sourceCode?: true
    sha3Hash?: true
    codeteiXml?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CodeWorkMaxAggregateInputType = {
    id?: true
    title?: true
    author?: true
    sourceCode?: true
    sha3Hash?: true
    codeteiXml?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CodeWorkCountAggregateInputType = {
    id?: true
    title?: true
    author?: true
    sourceCode?: true
    sha3Hash?: true
    codeteiXml?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CodeWorkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CodeWork to aggregate.
     */
    where?: CodeWorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodeWorks to fetch.
     */
    orderBy?: CodeWorkOrderByWithRelationInput | CodeWorkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CodeWorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodeWorks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodeWorks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CodeWorks
    **/
    _count?: true | CodeWorkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CodeWorkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CodeWorkMaxAggregateInputType
  }

  export type GetCodeWorkAggregateType<T extends CodeWorkAggregateArgs> = {
        [P in keyof T & keyof AggregateCodeWork]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCodeWork[P]>
      : GetScalarType<T[P], AggregateCodeWork[P]>
  }




  export type CodeWorkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CodeWorkWhereInput
    orderBy?: CodeWorkOrderByWithAggregationInput | CodeWorkOrderByWithAggregationInput[]
    by: CodeWorkScalarFieldEnum[] | CodeWorkScalarFieldEnum
    having?: CodeWorkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CodeWorkCountAggregateInputType | true
    _min?: CodeWorkMinAggregateInputType
    _max?: CodeWorkMaxAggregateInputType
  }

  export type CodeWorkGroupByOutputType = {
    id: string
    title: string
    author: string
    sourceCode: string
    sha3Hash: string
    codeteiXml: string
    createdAt: Date
    updatedAt: Date
    _count: CodeWorkCountAggregateOutputType | null
    _min: CodeWorkMinAggregateOutputType | null
    _max: CodeWorkMaxAggregateOutputType | null
  }

  type GetCodeWorkGroupByPayload<T extends CodeWorkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CodeWorkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CodeWorkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CodeWorkGroupByOutputType[P]>
            : GetScalarType<T[P], CodeWorkGroupByOutputType[P]>
        }
      >
    >


  export type CodeWorkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    author?: boolean
    sourceCode?: boolean
    sha3Hash?: boolean
    codeteiXml?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    explanations?: boolean | CodeWork$explanationsArgs<ExtArgs>
    executions?: boolean | CodeWork$executionsArgs<ExtArgs>
    _count?: boolean | CodeWorkCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["codeWork"]>

  export type CodeWorkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    author?: boolean
    sourceCode?: boolean
    sha3Hash?: boolean
    codeteiXml?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["codeWork"]>

  export type CodeWorkSelectScalar = {
    id?: boolean
    title?: boolean
    author?: boolean
    sourceCode?: boolean
    sha3Hash?: boolean
    codeteiXml?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CodeWorkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    explanations?: boolean | CodeWork$explanationsArgs<ExtArgs>
    executions?: boolean | CodeWork$executionsArgs<ExtArgs>
    _count?: boolean | CodeWorkCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CodeWorkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CodeWorkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CodeWork"
    objects: {
      explanations: Prisma.$ExplanationPayload<ExtArgs>[]
      executions: Prisma.$ExecutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      author: string
      sourceCode: string
      sha3Hash: string
      codeteiXml: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["codeWork"]>
    composites: {}
  }

  type CodeWorkGetPayload<S extends boolean | null | undefined | CodeWorkDefaultArgs> = $Result.GetResult<Prisma.$CodeWorkPayload, S>

  type CodeWorkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CodeWorkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CodeWorkCountAggregateInputType | true
    }

  export interface CodeWorkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CodeWork'], meta: { name: 'CodeWork' } }
    /**
     * Find zero or one CodeWork that matches the filter.
     * @param {CodeWorkFindUniqueArgs} args - Arguments to find a CodeWork
     * @example
     * // Get one CodeWork
     * const codeWork = await prisma.codeWork.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CodeWorkFindUniqueArgs>(args: SelectSubset<T, CodeWorkFindUniqueArgs<ExtArgs>>): Prisma__CodeWorkClient<$Result.GetResult<Prisma.$CodeWorkPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CodeWork that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CodeWorkFindUniqueOrThrowArgs} args - Arguments to find a CodeWork
     * @example
     * // Get one CodeWork
     * const codeWork = await prisma.codeWork.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CodeWorkFindUniqueOrThrowArgs>(args: SelectSubset<T, CodeWorkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CodeWorkClient<$Result.GetResult<Prisma.$CodeWorkPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CodeWork that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeWorkFindFirstArgs} args - Arguments to find a CodeWork
     * @example
     * // Get one CodeWork
     * const codeWork = await prisma.codeWork.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CodeWorkFindFirstArgs>(args?: SelectSubset<T, CodeWorkFindFirstArgs<ExtArgs>>): Prisma__CodeWorkClient<$Result.GetResult<Prisma.$CodeWorkPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CodeWork that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeWorkFindFirstOrThrowArgs} args - Arguments to find a CodeWork
     * @example
     * // Get one CodeWork
     * const codeWork = await prisma.codeWork.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CodeWorkFindFirstOrThrowArgs>(args?: SelectSubset<T, CodeWorkFindFirstOrThrowArgs<ExtArgs>>): Prisma__CodeWorkClient<$Result.GetResult<Prisma.$CodeWorkPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CodeWorks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeWorkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CodeWorks
     * const codeWorks = await prisma.codeWork.findMany()
     * 
     * // Get first 10 CodeWorks
     * const codeWorks = await prisma.codeWork.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const codeWorkWithIdOnly = await prisma.codeWork.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CodeWorkFindManyArgs>(args?: SelectSubset<T, CodeWorkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodeWorkPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CodeWork.
     * @param {CodeWorkCreateArgs} args - Arguments to create a CodeWork.
     * @example
     * // Create one CodeWork
     * const CodeWork = await prisma.codeWork.create({
     *   data: {
     *     // ... data to create a CodeWork
     *   }
     * })
     * 
     */
    create<T extends CodeWorkCreateArgs>(args: SelectSubset<T, CodeWorkCreateArgs<ExtArgs>>): Prisma__CodeWorkClient<$Result.GetResult<Prisma.$CodeWorkPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CodeWorks.
     * @param {CodeWorkCreateManyArgs} args - Arguments to create many CodeWorks.
     * @example
     * // Create many CodeWorks
     * const codeWork = await prisma.codeWork.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CodeWorkCreateManyArgs>(args?: SelectSubset<T, CodeWorkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CodeWorks and returns the data saved in the database.
     * @param {CodeWorkCreateManyAndReturnArgs} args - Arguments to create many CodeWorks.
     * @example
     * // Create many CodeWorks
     * const codeWork = await prisma.codeWork.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CodeWorks and only return the `id`
     * const codeWorkWithIdOnly = await prisma.codeWork.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CodeWorkCreateManyAndReturnArgs>(args?: SelectSubset<T, CodeWorkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodeWorkPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CodeWork.
     * @param {CodeWorkDeleteArgs} args - Arguments to delete one CodeWork.
     * @example
     * // Delete one CodeWork
     * const CodeWork = await prisma.codeWork.delete({
     *   where: {
     *     // ... filter to delete one CodeWork
     *   }
     * })
     * 
     */
    delete<T extends CodeWorkDeleteArgs>(args: SelectSubset<T, CodeWorkDeleteArgs<ExtArgs>>): Prisma__CodeWorkClient<$Result.GetResult<Prisma.$CodeWorkPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CodeWork.
     * @param {CodeWorkUpdateArgs} args - Arguments to update one CodeWork.
     * @example
     * // Update one CodeWork
     * const codeWork = await prisma.codeWork.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CodeWorkUpdateArgs>(args: SelectSubset<T, CodeWorkUpdateArgs<ExtArgs>>): Prisma__CodeWorkClient<$Result.GetResult<Prisma.$CodeWorkPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CodeWorks.
     * @param {CodeWorkDeleteManyArgs} args - Arguments to filter CodeWorks to delete.
     * @example
     * // Delete a few CodeWorks
     * const { count } = await prisma.codeWork.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CodeWorkDeleteManyArgs>(args?: SelectSubset<T, CodeWorkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CodeWorks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeWorkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CodeWorks
     * const codeWork = await prisma.codeWork.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CodeWorkUpdateManyArgs>(args: SelectSubset<T, CodeWorkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CodeWork.
     * @param {CodeWorkUpsertArgs} args - Arguments to update or create a CodeWork.
     * @example
     * // Update or create a CodeWork
     * const codeWork = await prisma.codeWork.upsert({
     *   create: {
     *     // ... data to create a CodeWork
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CodeWork we want to update
     *   }
     * })
     */
    upsert<T extends CodeWorkUpsertArgs>(args: SelectSubset<T, CodeWorkUpsertArgs<ExtArgs>>): Prisma__CodeWorkClient<$Result.GetResult<Prisma.$CodeWorkPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CodeWorks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeWorkCountArgs} args - Arguments to filter CodeWorks to count.
     * @example
     * // Count the number of CodeWorks
     * const count = await prisma.codeWork.count({
     *   where: {
     *     // ... the filter for the CodeWorks we want to count
     *   }
     * })
    **/
    count<T extends CodeWorkCountArgs>(
      args?: Subset<T, CodeWorkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CodeWorkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CodeWork.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeWorkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CodeWorkAggregateArgs>(args: Subset<T, CodeWorkAggregateArgs>): Prisma.PrismaPromise<GetCodeWorkAggregateType<T>>

    /**
     * Group by CodeWork.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeWorkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CodeWorkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CodeWorkGroupByArgs['orderBy'] }
        : { orderBy?: CodeWorkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CodeWorkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCodeWorkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CodeWork model
   */
  readonly fields: CodeWorkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CodeWork.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CodeWorkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    explanations<T extends CodeWork$explanationsArgs<ExtArgs> = {}>(args?: Subset<T, CodeWork$explanationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "findMany"> | Null>
    executions<T extends CodeWork$executionsArgs<ExtArgs> = {}>(args?: Subset<T, CodeWork$executionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExecutionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CodeWork model
   */ 
  interface CodeWorkFieldRefs {
    readonly id: FieldRef<"CodeWork", 'String'>
    readonly title: FieldRef<"CodeWork", 'String'>
    readonly author: FieldRef<"CodeWork", 'String'>
    readonly sourceCode: FieldRef<"CodeWork", 'String'>
    readonly sha3Hash: FieldRef<"CodeWork", 'String'>
    readonly codeteiXml: FieldRef<"CodeWork", 'String'>
    readonly createdAt: FieldRef<"CodeWork", 'DateTime'>
    readonly updatedAt: FieldRef<"CodeWork", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CodeWork findUnique
   */
  export type CodeWorkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeWork
     */
    select?: CodeWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeWorkInclude<ExtArgs> | null
    /**
     * Filter, which CodeWork to fetch.
     */
    where: CodeWorkWhereUniqueInput
  }

  /**
   * CodeWork findUniqueOrThrow
   */
  export type CodeWorkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeWork
     */
    select?: CodeWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeWorkInclude<ExtArgs> | null
    /**
     * Filter, which CodeWork to fetch.
     */
    where: CodeWorkWhereUniqueInput
  }

  /**
   * CodeWork findFirst
   */
  export type CodeWorkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeWork
     */
    select?: CodeWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeWorkInclude<ExtArgs> | null
    /**
     * Filter, which CodeWork to fetch.
     */
    where?: CodeWorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodeWorks to fetch.
     */
    orderBy?: CodeWorkOrderByWithRelationInput | CodeWorkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CodeWorks.
     */
    cursor?: CodeWorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodeWorks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodeWorks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CodeWorks.
     */
    distinct?: CodeWorkScalarFieldEnum | CodeWorkScalarFieldEnum[]
  }

  /**
   * CodeWork findFirstOrThrow
   */
  export type CodeWorkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeWork
     */
    select?: CodeWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeWorkInclude<ExtArgs> | null
    /**
     * Filter, which CodeWork to fetch.
     */
    where?: CodeWorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodeWorks to fetch.
     */
    orderBy?: CodeWorkOrderByWithRelationInput | CodeWorkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CodeWorks.
     */
    cursor?: CodeWorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodeWorks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodeWorks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CodeWorks.
     */
    distinct?: CodeWorkScalarFieldEnum | CodeWorkScalarFieldEnum[]
  }

  /**
   * CodeWork findMany
   */
  export type CodeWorkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeWork
     */
    select?: CodeWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeWorkInclude<ExtArgs> | null
    /**
     * Filter, which CodeWorks to fetch.
     */
    where?: CodeWorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodeWorks to fetch.
     */
    orderBy?: CodeWorkOrderByWithRelationInput | CodeWorkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CodeWorks.
     */
    cursor?: CodeWorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodeWorks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodeWorks.
     */
    skip?: number
    distinct?: CodeWorkScalarFieldEnum | CodeWorkScalarFieldEnum[]
  }

  /**
   * CodeWork create
   */
  export type CodeWorkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeWork
     */
    select?: CodeWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeWorkInclude<ExtArgs> | null
    /**
     * The data needed to create a CodeWork.
     */
    data: XOR<CodeWorkCreateInput, CodeWorkUncheckedCreateInput>
  }

  /**
   * CodeWork createMany
   */
  export type CodeWorkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CodeWorks.
     */
    data: CodeWorkCreateManyInput | CodeWorkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CodeWork createManyAndReturn
   */
  export type CodeWorkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeWork
     */
    select?: CodeWorkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CodeWorks.
     */
    data: CodeWorkCreateManyInput | CodeWorkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CodeWork update
   */
  export type CodeWorkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeWork
     */
    select?: CodeWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeWorkInclude<ExtArgs> | null
    /**
     * The data needed to update a CodeWork.
     */
    data: XOR<CodeWorkUpdateInput, CodeWorkUncheckedUpdateInput>
    /**
     * Choose, which CodeWork to update.
     */
    where: CodeWorkWhereUniqueInput
  }

  /**
   * CodeWork updateMany
   */
  export type CodeWorkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CodeWorks.
     */
    data: XOR<CodeWorkUpdateManyMutationInput, CodeWorkUncheckedUpdateManyInput>
    /**
     * Filter which CodeWorks to update
     */
    where?: CodeWorkWhereInput
  }

  /**
   * CodeWork upsert
   */
  export type CodeWorkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeWork
     */
    select?: CodeWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeWorkInclude<ExtArgs> | null
    /**
     * The filter to search for the CodeWork to update in case it exists.
     */
    where: CodeWorkWhereUniqueInput
    /**
     * In case the CodeWork found by the `where` argument doesn't exist, create a new CodeWork with this data.
     */
    create: XOR<CodeWorkCreateInput, CodeWorkUncheckedCreateInput>
    /**
     * In case the CodeWork was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CodeWorkUpdateInput, CodeWorkUncheckedUpdateInput>
  }

  /**
   * CodeWork delete
   */
  export type CodeWorkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeWork
     */
    select?: CodeWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeWorkInclude<ExtArgs> | null
    /**
     * Filter which CodeWork to delete.
     */
    where: CodeWorkWhereUniqueInput
  }

  /**
   * CodeWork deleteMany
   */
  export type CodeWorkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CodeWorks to delete
     */
    where?: CodeWorkWhereInput
  }

  /**
   * CodeWork.explanations
   */
  export type CodeWork$explanationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    where?: ExplanationWhereInput
    orderBy?: ExplanationOrderByWithRelationInput | ExplanationOrderByWithRelationInput[]
    cursor?: ExplanationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExplanationScalarFieldEnum | ExplanationScalarFieldEnum[]
  }

  /**
   * CodeWork.executions
   */
  export type CodeWork$executionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Execution
     */
    select?: ExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExecutionInclude<ExtArgs> | null
    where?: ExecutionWhereInput
    orderBy?: ExecutionOrderByWithRelationInput | ExecutionOrderByWithRelationInput[]
    cursor?: ExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExecutionScalarFieldEnum | ExecutionScalarFieldEnum[]
  }

  /**
   * CodeWork without action
   */
  export type CodeWorkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeWork
     */
    select?: CodeWorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodeWorkInclude<ExtArgs> | null
  }


  /**
   * Model Explanation
   */

  export type AggregateExplanation = {
    _count: ExplanationCountAggregateOutputType | null
    _avg: ExplanationAvgAggregateOutputType | null
    _sum: ExplanationSumAggregateOutputType | null
    _min: ExplanationMinAggregateOutputType | null
    _max: ExplanationMaxAggregateOutputType | null
  }

  export type ExplanationAvgAggregateOutputType = {
    lineNumber: number | null
    confidence: number | null
    understanding: number | null
  }

  export type ExplanationSumAggregateOutputType = {
    lineNumber: number | null
    confidence: number | null
    understanding: number | null
  }

  export type ExplanationMinAggregateOutputType = {
    id: string | null
    type: string | null
    lineNumber: number | null
    content: string | null
    agent: string | null
    model: string | null
    confidence: number | null
    understanding: number | null
    question: string | null
    codeWorkId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExplanationMaxAggregateOutputType = {
    id: string | null
    type: string | null
    lineNumber: number | null
    content: string | null
    agent: string | null
    model: string | null
    confidence: number | null
    understanding: number | null
    question: string | null
    codeWorkId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExplanationCountAggregateOutputType = {
    id: number
    type: number
    lineNumber: number
    content: number
    agent: number
    model: number
    confidence: number
    understanding: number
    question: number
    codeWorkId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExplanationAvgAggregateInputType = {
    lineNumber?: true
    confidence?: true
    understanding?: true
  }

  export type ExplanationSumAggregateInputType = {
    lineNumber?: true
    confidence?: true
    understanding?: true
  }

  export type ExplanationMinAggregateInputType = {
    id?: true
    type?: true
    lineNumber?: true
    content?: true
    agent?: true
    model?: true
    confidence?: true
    understanding?: true
    question?: true
    codeWorkId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExplanationMaxAggregateInputType = {
    id?: true
    type?: true
    lineNumber?: true
    content?: true
    agent?: true
    model?: true
    confidence?: true
    understanding?: true
    question?: true
    codeWorkId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExplanationCountAggregateInputType = {
    id?: true
    type?: true
    lineNumber?: true
    content?: true
    agent?: true
    model?: true
    confidence?: true
    understanding?: true
    question?: true
    codeWorkId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExplanationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Explanation to aggregate.
     */
    where?: ExplanationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Explanations to fetch.
     */
    orderBy?: ExplanationOrderByWithRelationInput | ExplanationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExplanationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Explanations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Explanations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Explanations
    **/
    _count?: true | ExplanationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExplanationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExplanationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExplanationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExplanationMaxAggregateInputType
  }

  export type GetExplanationAggregateType<T extends ExplanationAggregateArgs> = {
        [P in keyof T & keyof AggregateExplanation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExplanation[P]>
      : GetScalarType<T[P], AggregateExplanation[P]>
  }




  export type ExplanationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExplanationWhereInput
    orderBy?: ExplanationOrderByWithAggregationInput | ExplanationOrderByWithAggregationInput[]
    by: ExplanationScalarFieldEnum[] | ExplanationScalarFieldEnum
    having?: ExplanationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExplanationCountAggregateInputType | true
    _avg?: ExplanationAvgAggregateInputType
    _sum?: ExplanationSumAggregateInputType
    _min?: ExplanationMinAggregateInputType
    _max?: ExplanationMaxAggregateInputType
  }

  export type ExplanationGroupByOutputType = {
    id: string
    type: string
    lineNumber: number | null
    content: string
    agent: string
    model: string | null
    confidence: number | null
    understanding: number | null
    question: string | null
    codeWorkId: string
    createdAt: Date
    updatedAt: Date
    _count: ExplanationCountAggregateOutputType | null
    _avg: ExplanationAvgAggregateOutputType | null
    _sum: ExplanationSumAggregateOutputType | null
    _min: ExplanationMinAggregateOutputType | null
    _max: ExplanationMaxAggregateOutputType | null
  }

  type GetExplanationGroupByPayload<T extends ExplanationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExplanationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExplanationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExplanationGroupByOutputType[P]>
            : GetScalarType<T[P], ExplanationGroupByOutputType[P]>
        }
      >
    >


  export type ExplanationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    lineNumber?: boolean
    content?: boolean
    agent?: boolean
    model?: boolean
    confidence?: boolean
    understanding?: boolean
    question?: boolean
    codeWorkId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codeWork?: boolean | CodeWorkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["explanation"]>

  export type ExplanationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    lineNumber?: boolean
    content?: boolean
    agent?: boolean
    model?: boolean
    confidence?: boolean
    understanding?: boolean
    question?: boolean
    codeWorkId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codeWork?: boolean | CodeWorkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["explanation"]>

  export type ExplanationSelectScalar = {
    id?: boolean
    type?: boolean
    lineNumber?: boolean
    content?: boolean
    agent?: boolean
    model?: boolean
    confidence?: boolean
    understanding?: boolean
    question?: boolean
    codeWorkId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExplanationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codeWork?: boolean | CodeWorkDefaultArgs<ExtArgs>
  }
  export type ExplanationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codeWork?: boolean | CodeWorkDefaultArgs<ExtArgs>
  }

  export type $ExplanationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Explanation"
    objects: {
      codeWork: Prisma.$CodeWorkPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      lineNumber: number | null
      content: string
      agent: string
      model: string | null
      confidence: number | null
      understanding: number | null
      question: string | null
      codeWorkId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["explanation"]>
    composites: {}
  }

  type ExplanationGetPayload<S extends boolean | null | undefined | ExplanationDefaultArgs> = $Result.GetResult<Prisma.$ExplanationPayload, S>

  type ExplanationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExplanationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExplanationCountAggregateInputType | true
    }

  export interface ExplanationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Explanation'], meta: { name: 'Explanation' } }
    /**
     * Find zero or one Explanation that matches the filter.
     * @param {ExplanationFindUniqueArgs} args - Arguments to find a Explanation
     * @example
     * // Get one Explanation
     * const explanation = await prisma.explanation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExplanationFindUniqueArgs>(args: SelectSubset<T, ExplanationFindUniqueArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Explanation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExplanationFindUniqueOrThrowArgs} args - Arguments to find a Explanation
     * @example
     * // Get one Explanation
     * const explanation = await prisma.explanation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExplanationFindUniqueOrThrowArgs>(args: SelectSubset<T, ExplanationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Explanation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationFindFirstArgs} args - Arguments to find a Explanation
     * @example
     * // Get one Explanation
     * const explanation = await prisma.explanation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExplanationFindFirstArgs>(args?: SelectSubset<T, ExplanationFindFirstArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Explanation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationFindFirstOrThrowArgs} args - Arguments to find a Explanation
     * @example
     * // Get one Explanation
     * const explanation = await prisma.explanation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExplanationFindFirstOrThrowArgs>(args?: SelectSubset<T, ExplanationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Explanations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Explanations
     * const explanations = await prisma.explanation.findMany()
     * 
     * // Get first 10 Explanations
     * const explanations = await prisma.explanation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const explanationWithIdOnly = await prisma.explanation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExplanationFindManyArgs>(args?: SelectSubset<T, ExplanationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Explanation.
     * @param {ExplanationCreateArgs} args - Arguments to create a Explanation.
     * @example
     * // Create one Explanation
     * const Explanation = await prisma.explanation.create({
     *   data: {
     *     // ... data to create a Explanation
     *   }
     * })
     * 
     */
    create<T extends ExplanationCreateArgs>(args: SelectSubset<T, ExplanationCreateArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Explanations.
     * @param {ExplanationCreateManyArgs} args - Arguments to create many Explanations.
     * @example
     * // Create many Explanations
     * const explanation = await prisma.explanation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExplanationCreateManyArgs>(args?: SelectSubset<T, ExplanationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Explanations and returns the data saved in the database.
     * @param {ExplanationCreateManyAndReturnArgs} args - Arguments to create many Explanations.
     * @example
     * // Create many Explanations
     * const explanation = await prisma.explanation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Explanations and only return the `id`
     * const explanationWithIdOnly = await prisma.explanation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExplanationCreateManyAndReturnArgs>(args?: SelectSubset<T, ExplanationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Explanation.
     * @param {ExplanationDeleteArgs} args - Arguments to delete one Explanation.
     * @example
     * // Delete one Explanation
     * const Explanation = await prisma.explanation.delete({
     *   where: {
     *     // ... filter to delete one Explanation
     *   }
     * })
     * 
     */
    delete<T extends ExplanationDeleteArgs>(args: SelectSubset<T, ExplanationDeleteArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Explanation.
     * @param {ExplanationUpdateArgs} args - Arguments to update one Explanation.
     * @example
     * // Update one Explanation
     * const explanation = await prisma.explanation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExplanationUpdateArgs>(args: SelectSubset<T, ExplanationUpdateArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Explanations.
     * @param {ExplanationDeleteManyArgs} args - Arguments to filter Explanations to delete.
     * @example
     * // Delete a few Explanations
     * const { count } = await prisma.explanation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExplanationDeleteManyArgs>(args?: SelectSubset<T, ExplanationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Explanations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Explanations
     * const explanation = await prisma.explanation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExplanationUpdateManyArgs>(args: SelectSubset<T, ExplanationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Explanation.
     * @param {ExplanationUpsertArgs} args - Arguments to update or create a Explanation.
     * @example
     * // Update or create a Explanation
     * const explanation = await prisma.explanation.upsert({
     *   create: {
     *     // ... data to create a Explanation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Explanation we want to update
     *   }
     * })
     */
    upsert<T extends ExplanationUpsertArgs>(args: SelectSubset<T, ExplanationUpsertArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Explanations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationCountArgs} args - Arguments to filter Explanations to count.
     * @example
     * // Count the number of Explanations
     * const count = await prisma.explanation.count({
     *   where: {
     *     // ... the filter for the Explanations we want to count
     *   }
     * })
    **/
    count<T extends ExplanationCountArgs>(
      args?: Subset<T, ExplanationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExplanationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Explanation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExplanationAggregateArgs>(args: Subset<T, ExplanationAggregateArgs>): Prisma.PrismaPromise<GetExplanationAggregateType<T>>

    /**
     * Group by Explanation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExplanationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExplanationGroupByArgs['orderBy'] }
        : { orderBy?: ExplanationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExplanationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExplanationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Explanation model
   */
  readonly fields: ExplanationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Explanation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExplanationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    codeWork<T extends CodeWorkDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CodeWorkDefaultArgs<ExtArgs>>): Prisma__CodeWorkClient<$Result.GetResult<Prisma.$CodeWorkPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Explanation model
   */ 
  interface ExplanationFieldRefs {
    readonly id: FieldRef<"Explanation", 'String'>
    readonly type: FieldRef<"Explanation", 'String'>
    readonly lineNumber: FieldRef<"Explanation", 'Int'>
    readonly content: FieldRef<"Explanation", 'String'>
    readonly agent: FieldRef<"Explanation", 'String'>
    readonly model: FieldRef<"Explanation", 'String'>
    readonly confidence: FieldRef<"Explanation", 'Float'>
    readonly understanding: FieldRef<"Explanation", 'Int'>
    readonly question: FieldRef<"Explanation", 'String'>
    readonly codeWorkId: FieldRef<"Explanation", 'String'>
    readonly createdAt: FieldRef<"Explanation", 'DateTime'>
    readonly updatedAt: FieldRef<"Explanation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Explanation findUnique
   */
  export type ExplanationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * Filter, which Explanation to fetch.
     */
    where: ExplanationWhereUniqueInput
  }

  /**
   * Explanation findUniqueOrThrow
   */
  export type ExplanationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * Filter, which Explanation to fetch.
     */
    where: ExplanationWhereUniqueInput
  }

  /**
   * Explanation findFirst
   */
  export type ExplanationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * Filter, which Explanation to fetch.
     */
    where?: ExplanationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Explanations to fetch.
     */
    orderBy?: ExplanationOrderByWithRelationInput | ExplanationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Explanations.
     */
    cursor?: ExplanationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Explanations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Explanations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Explanations.
     */
    distinct?: ExplanationScalarFieldEnum | ExplanationScalarFieldEnum[]
  }

  /**
   * Explanation findFirstOrThrow
   */
  export type ExplanationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * Filter, which Explanation to fetch.
     */
    where?: ExplanationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Explanations to fetch.
     */
    orderBy?: ExplanationOrderByWithRelationInput | ExplanationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Explanations.
     */
    cursor?: ExplanationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Explanations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Explanations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Explanations.
     */
    distinct?: ExplanationScalarFieldEnum | ExplanationScalarFieldEnum[]
  }

  /**
   * Explanation findMany
   */
  export type ExplanationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * Filter, which Explanations to fetch.
     */
    where?: ExplanationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Explanations to fetch.
     */
    orderBy?: ExplanationOrderByWithRelationInput | ExplanationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Explanations.
     */
    cursor?: ExplanationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Explanations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Explanations.
     */
    skip?: number
    distinct?: ExplanationScalarFieldEnum | ExplanationScalarFieldEnum[]
  }

  /**
   * Explanation create
   */
  export type ExplanationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * The data needed to create a Explanation.
     */
    data: XOR<ExplanationCreateInput, ExplanationUncheckedCreateInput>
  }

  /**
   * Explanation createMany
   */
  export type ExplanationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Explanations.
     */
    data: ExplanationCreateManyInput | ExplanationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Explanation createManyAndReturn
   */
  export type ExplanationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Explanations.
     */
    data: ExplanationCreateManyInput | ExplanationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Explanation update
   */
  export type ExplanationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * The data needed to update a Explanation.
     */
    data: XOR<ExplanationUpdateInput, ExplanationUncheckedUpdateInput>
    /**
     * Choose, which Explanation to update.
     */
    where: ExplanationWhereUniqueInput
  }

  /**
   * Explanation updateMany
   */
  export type ExplanationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Explanations.
     */
    data: XOR<ExplanationUpdateManyMutationInput, ExplanationUncheckedUpdateManyInput>
    /**
     * Filter which Explanations to update
     */
    where?: ExplanationWhereInput
  }

  /**
   * Explanation upsert
   */
  export type ExplanationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * The filter to search for the Explanation to update in case it exists.
     */
    where: ExplanationWhereUniqueInput
    /**
     * In case the Explanation found by the `where` argument doesn't exist, create a new Explanation with this data.
     */
    create: XOR<ExplanationCreateInput, ExplanationUncheckedCreateInput>
    /**
     * In case the Explanation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExplanationUpdateInput, ExplanationUncheckedUpdateInput>
  }

  /**
   * Explanation delete
   */
  export type ExplanationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * Filter which Explanation to delete.
     */
    where: ExplanationWhereUniqueInput
  }

  /**
   * Explanation deleteMany
   */
  export type ExplanationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Explanations to delete
     */
    where?: ExplanationWhereInput
  }

  /**
   * Explanation without action
   */
  export type ExplanationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
  }


  /**
   * Model Execution
   */

  export type AggregateExecution = {
    _count: ExecutionCountAggregateOutputType | null
    _min: ExecutionMinAggregateOutputType | null
    _max: ExecutionMaxAggregateOutputType | null
  }

  export type ExecutionMinAggregateOutputType = {
    id: string | null
    type: string | null
    containerInfo: string | null
    chainName: string | null
    txId: string | null
    status: string | null
    notes: string | null
    executedAt: Date | null
    codeWorkId: string | null
    createdAt: Date | null
  }

  export type ExecutionMaxAggregateOutputType = {
    id: string | null
    type: string | null
    containerInfo: string | null
    chainName: string | null
    txId: string | null
    status: string | null
    notes: string | null
    executedAt: Date | null
    codeWorkId: string | null
    createdAt: Date | null
  }

  export type ExecutionCountAggregateOutputType = {
    id: number
    type: number
    containerInfo: number
    chainName: number
    txId: number
    status: number
    notes: number
    executedAt: number
    codeWorkId: number
    createdAt: number
    _all: number
  }


  export type ExecutionMinAggregateInputType = {
    id?: true
    type?: true
    containerInfo?: true
    chainName?: true
    txId?: true
    status?: true
    notes?: true
    executedAt?: true
    codeWorkId?: true
    createdAt?: true
  }

  export type ExecutionMaxAggregateInputType = {
    id?: true
    type?: true
    containerInfo?: true
    chainName?: true
    txId?: true
    status?: true
    notes?: true
    executedAt?: true
    codeWorkId?: true
    createdAt?: true
  }

  export type ExecutionCountAggregateInputType = {
    id?: true
    type?: true
    containerInfo?: true
    chainName?: true
    txId?: true
    status?: true
    notes?: true
    executedAt?: true
    codeWorkId?: true
    createdAt?: true
    _all?: true
  }

  export type ExecutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Execution to aggregate.
     */
    where?: ExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Executions to fetch.
     */
    orderBy?: ExecutionOrderByWithRelationInput | ExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Executions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Executions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Executions
    **/
    _count?: true | ExecutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExecutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExecutionMaxAggregateInputType
  }

  export type GetExecutionAggregateType<T extends ExecutionAggregateArgs> = {
        [P in keyof T & keyof AggregateExecution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExecution[P]>
      : GetScalarType<T[P], AggregateExecution[P]>
  }




  export type ExecutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExecutionWhereInput
    orderBy?: ExecutionOrderByWithAggregationInput | ExecutionOrderByWithAggregationInput[]
    by: ExecutionScalarFieldEnum[] | ExecutionScalarFieldEnum
    having?: ExecutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExecutionCountAggregateInputType | true
    _min?: ExecutionMinAggregateInputType
    _max?: ExecutionMaxAggregateInputType
  }

  export type ExecutionGroupByOutputType = {
    id: string
    type: string
    containerInfo: string | null
    chainName: string | null
    txId: string | null
    status: string
    notes: string | null
    executedAt: Date
    codeWorkId: string
    createdAt: Date
    _count: ExecutionCountAggregateOutputType | null
    _min: ExecutionMinAggregateOutputType | null
    _max: ExecutionMaxAggregateOutputType | null
  }

  type GetExecutionGroupByPayload<T extends ExecutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExecutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExecutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExecutionGroupByOutputType[P]>
            : GetScalarType<T[P], ExecutionGroupByOutputType[P]>
        }
      >
    >


  export type ExecutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    containerInfo?: boolean
    chainName?: boolean
    txId?: boolean
    status?: boolean
    notes?: boolean
    executedAt?: boolean
    codeWorkId?: boolean
    createdAt?: boolean
    codeWork?: boolean | CodeWorkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["execution"]>

  export type ExecutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    containerInfo?: boolean
    chainName?: boolean
    txId?: boolean
    status?: boolean
    notes?: boolean
    executedAt?: boolean
    codeWorkId?: boolean
    createdAt?: boolean
    codeWork?: boolean | CodeWorkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["execution"]>

  export type ExecutionSelectScalar = {
    id?: boolean
    type?: boolean
    containerInfo?: boolean
    chainName?: boolean
    txId?: boolean
    status?: boolean
    notes?: boolean
    executedAt?: boolean
    codeWorkId?: boolean
    createdAt?: boolean
  }

  export type ExecutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codeWork?: boolean | CodeWorkDefaultArgs<ExtArgs>
  }
  export type ExecutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codeWork?: boolean | CodeWorkDefaultArgs<ExtArgs>
  }

  export type $ExecutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Execution"
    objects: {
      codeWork: Prisma.$CodeWorkPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      containerInfo: string | null
      chainName: string | null
      txId: string | null
      status: string
      notes: string | null
      executedAt: Date
      codeWorkId: string
      createdAt: Date
    }, ExtArgs["result"]["execution"]>
    composites: {}
  }

  type ExecutionGetPayload<S extends boolean | null | undefined | ExecutionDefaultArgs> = $Result.GetResult<Prisma.$ExecutionPayload, S>

  type ExecutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExecutionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExecutionCountAggregateInputType | true
    }

  export interface ExecutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Execution'], meta: { name: 'Execution' } }
    /**
     * Find zero or one Execution that matches the filter.
     * @param {ExecutionFindUniqueArgs} args - Arguments to find a Execution
     * @example
     * // Get one Execution
     * const execution = await prisma.execution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExecutionFindUniqueArgs>(args: SelectSubset<T, ExecutionFindUniqueArgs<ExtArgs>>): Prisma__ExecutionClient<$Result.GetResult<Prisma.$ExecutionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Execution that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExecutionFindUniqueOrThrowArgs} args - Arguments to find a Execution
     * @example
     * // Get one Execution
     * const execution = await prisma.execution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExecutionFindUniqueOrThrowArgs>(args: SelectSubset<T, ExecutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExecutionClient<$Result.GetResult<Prisma.$ExecutionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Execution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionFindFirstArgs} args - Arguments to find a Execution
     * @example
     * // Get one Execution
     * const execution = await prisma.execution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExecutionFindFirstArgs>(args?: SelectSubset<T, ExecutionFindFirstArgs<ExtArgs>>): Prisma__ExecutionClient<$Result.GetResult<Prisma.$ExecutionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Execution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionFindFirstOrThrowArgs} args - Arguments to find a Execution
     * @example
     * // Get one Execution
     * const execution = await prisma.execution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExecutionFindFirstOrThrowArgs>(args?: SelectSubset<T, ExecutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExecutionClient<$Result.GetResult<Prisma.$ExecutionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Executions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Executions
     * const executions = await prisma.execution.findMany()
     * 
     * // Get first 10 Executions
     * const executions = await prisma.execution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const executionWithIdOnly = await prisma.execution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExecutionFindManyArgs>(args?: SelectSubset<T, ExecutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExecutionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Execution.
     * @param {ExecutionCreateArgs} args - Arguments to create a Execution.
     * @example
     * // Create one Execution
     * const Execution = await prisma.execution.create({
     *   data: {
     *     // ... data to create a Execution
     *   }
     * })
     * 
     */
    create<T extends ExecutionCreateArgs>(args: SelectSubset<T, ExecutionCreateArgs<ExtArgs>>): Prisma__ExecutionClient<$Result.GetResult<Prisma.$ExecutionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Executions.
     * @param {ExecutionCreateManyArgs} args - Arguments to create many Executions.
     * @example
     * // Create many Executions
     * const execution = await prisma.execution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExecutionCreateManyArgs>(args?: SelectSubset<T, ExecutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Executions and returns the data saved in the database.
     * @param {ExecutionCreateManyAndReturnArgs} args - Arguments to create many Executions.
     * @example
     * // Create many Executions
     * const execution = await prisma.execution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Executions and only return the `id`
     * const executionWithIdOnly = await prisma.execution.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExecutionCreateManyAndReturnArgs>(args?: SelectSubset<T, ExecutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExecutionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Execution.
     * @param {ExecutionDeleteArgs} args - Arguments to delete one Execution.
     * @example
     * // Delete one Execution
     * const Execution = await prisma.execution.delete({
     *   where: {
     *     // ... filter to delete one Execution
     *   }
     * })
     * 
     */
    delete<T extends ExecutionDeleteArgs>(args: SelectSubset<T, ExecutionDeleteArgs<ExtArgs>>): Prisma__ExecutionClient<$Result.GetResult<Prisma.$ExecutionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Execution.
     * @param {ExecutionUpdateArgs} args - Arguments to update one Execution.
     * @example
     * // Update one Execution
     * const execution = await prisma.execution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExecutionUpdateArgs>(args: SelectSubset<T, ExecutionUpdateArgs<ExtArgs>>): Prisma__ExecutionClient<$Result.GetResult<Prisma.$ExecutionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Executions.
     * @param {ExecutionDeleteManyArgs} args - Arguments to filter Executions to delete.
     * @example
     * // Delete a few Executions
     * const { count } = await prisma.execution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExecutionDeleteManyArgs>(args?: SelectSubset<T, ExecutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Executions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Executions
     * const execution = await prisma.execution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExecutionUpdateManyArgs>(args: SelectSubset<T, ExecutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Execution.
     * @param {ExecutionUpsertArgs} args - Arguments to update or create a Execution.
     * @example
     * // Update or create a Execution
     * const execution = await prisma.execution.upsert({
     *   create: {
     *     // ... data to create a Execution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Execution we want to update
     *   }
     * })
     */
    upsert<T extends ExecutionUpsertArgs>(args: SelectSubset<T, ExecutionUpsertArgs<ExtArgs>>): Prisma__ExecutionClient<$Result.GetResult<Prisma.$ExecutionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Executions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionCountArgs} args - Arguments to filter Executions to count.
     * @example
     * // Count the number of Executions
     * const count = await prisma.execution.count({
     *   where: {
     *     // ... the filter for the Executions we want to count
     *   }
     * })
    **/
    count<T extends ExecutionCountArgs>(
      args?: Subset<T, ExecutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExecutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Execution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExecutionAggregateArgs>(args: Subset<T, ExecutionAggregateArgs>): Prisma.PrismaPromise<GetExecutionAggregateType<T>>

    /**
     * Group by Execution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExecutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExecutionGroupByArgs['orderBy'] }
        : { orderBy?: ExecutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExecutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExecutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Execution model
   */
  readonly fields: ExecutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Execution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExecutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    codeWork<T extends CodeWorkDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CodeWorkDefaultArgs<ExtArgs>>): Prisma__CodeWorkClient<$Result.GetResult<Prisma.$CodeWorkPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Execution model
   */ 
  interface ExecutionFieldRefs {
    readonly id: FieldRef<"Execution", 'String'>
    readonly type: FieldRef<"Execution", 'String'>
    readonly containerInfo: FieldRef<"Execution", 'String'>
    readonly chainName: FieldRef<"Execution", 'String'>
    readonly txId: FieldRef<"Execution", 'String'>
    readonly status: FieldRef<"Execution", 'String'>
    readonly notes: FieldRef<"Execution", 'String'>
    readonly executedAt: FieldRef<"Execution", 'DateTime'>
    readonly codeWorkId: FieldRef<"Execution", 'String'>
    readonly createdAt: FieldRef<"Execution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Execution findUnique
   */
  export type ExecutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Execution
     */
    select?: ExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExecutionInclude<ExtArgs> | null
    /**
     * Filter, which Execution to fetch.
     */
    where: ExecutionWhereUniqueInput
  }

  /**
   * Execution findUniqueOrThrow
   */
  export type ExecutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Execution
     */
    select?: ExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExecutionInclude<ExtArgs> | null
    /**
     * Filter, which Execution to fetch.
     */
    where: ExecutionWhereUniqueInput
  }

  /**
   * Execution findFirst
   */
  export type ExecutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Execution
     */
    select?: ExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExecutionInclude<ExtArgs> | null
    /**
     * Filter, which Execution to fetch.
     */
    where?: ExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Executions to fetch.
     */
    orderBy?: ExecutionOrderByWithRelationInput | ExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Executions.
     */
    cursor?: ExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Executions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Executions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Executions.
     */
    distinct?: ExecutionScalarFieldEnum | ExecutionScalarFieldEnum[]
  }

  /**
   * Execution findFirstOrThrow
   */
  export type ExecutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Execution
     */
    select?: ExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExecutionInclude<ExtArgs> | null
    /**
     * Filter, which Execution to fetch.
     */
    where?: ExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Executions to fetch.
     */
    orderBy?: ExecutionOrderByWithRelationInput | ExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Executions.
     */
    cursor?: ExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Executions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Executions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Executions.
     */
    distinct?: ExecutionScalarFieldEnum | ExecutionScalarFieldEnum[]
  }

  /**
   * Execution findMany
   */
  export type ExecutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Execution
     */
    select?: ExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExecutionInclude<ExtArgs> | null
    /**
     * Filter, which Executions to fetch.
     */
    where?: ExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Executions to fetch.
     */
    orderBy?: ExecutionOrderByWithRelationInput | ExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Executions.
     */
    cursor?: ExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Executions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Executions.
     */
    skip?: number
    distinct?: ExecutionScalarFieldEnum | ExecutionScalarFieldEnum[]
  }

  /**
   * Execution create
   */
  export type ExecutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Execution
     */
    select?: ExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExecutionInclude<ExtArgs> | null
    /**
     * The data needed to create a Execution.
     */
    data: XOR<ExecutionCreateInput, ExecutionUncheckedCreateInput>
  }

  /**
   * Execution createMany
   */
  export type ExecutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Executions.
     */
    data: ExecutionCreateManyInput | ExecutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Execution createManyAndReturn
   */
  export type ExecutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Execution
     */
    select?: ExecutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Executions.
     */
    data: ExecutionCreateManyInput | ExecutionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExecutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Execution update
   */
  export type ExecutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Execution
     */
    select?: ExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExecutionInclude<ExtArgs> | null
    /**
     * The data needed to update a Execution.
     */
    data: XOR<ExecutionUpdateInput, ExecutionUncheckedUpdateInput>
    /**
     * Choose, which Execution to update.
     */
    where: ExecutionWhereUniqueInput
  }

  /**
   * Execution updateMany
   */
  export type ExecutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Executions.
     */
    data: XOR<ExecutionUpdateManyMutationInput, ExecutionUncheckedUpdateManyInput>
    /**
     * Filter which Executions to update
     */
    where?: ExecutionWhereInput
  }

  /**
   * Execution upsert
   */
  export type ExecutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Execution
     */
    select?: ExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExecutionInclude<ExtArgs> | null
    /**
     * The filter to search for the Execution to update in case it exists.
     */
    where: ExecutionWhereUniqueInput
    /**
     * In case the Execution found by the `where` argument doesn't exist, create a new Execution with this data.
     */
    create: XOR<ExecutionCreateInput, ExecutionUncheckedCreateInput>
    /**
     * In case the Execution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExecutionUpdateInput, ExecutionUncheckedUpdateInput>
  }

  /**
   * Execution delete
   */
  export type ExecutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Execution
     */
    select?: ExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExecutionInclude<ExtArgs> | null
    /**
     * Filter which Execution to delete.
     */
    where: ExecutionWhereUniqueInput
  }

  /**
   * Execution deleteMany
   */
  export type ExecutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Executions to delete
     */
    where?: ExecutionWhereInput
  }

  /**
   * Execution without action
   */
  export type ExecutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Execution
     */
    select?: ExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExecutionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CodeWorkScalarFieldEnum: {
    id: 'id',
    title: 'title',
    author: 'author',
    sourceCode: 'sourceCode',
    sha3Hash: 'sha3Hash',
    codeteiXml: 'codeteiXml',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CodeWorkScalarFieldEnum = (typeof CodeWorkScalarFieldEnum)[keyof typeof CodeWorkScalarFieldEnum]


  export const ExplanationScalarFieldEnum: {
    id: 'id',
    type: 'type',
    lineNumber: 'lineNumber',
    content: 'content',
    agent: 'agent',
    model: 'model',
    confidence: 'confidence',
    understanding: 'understanding',
    question: 'question',
    codeWorkId: 'codeWorkId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExplanationScalarFieldEnum = (typeof ExplanationScalarFieldEnum)[keyof typeof ExplanationScalarFieldEnum]


  export const ExecutionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    containerInfo: 'containerInfo',
    chainName: 'chainName',
    txId: 'txId',
    status: 'status',
    notes: 'notes',
    executedAt: 'executedAt',
    codeWorkId: 'codeWorkId',
    createdAt: 'createdAt'
  };

  export type ExecutionScalarFieldEnum = (typeof ExecutionScalarFieldEnum)[keyof typeof ExecutionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type CodeWorkWhereInput = {
    AND?: CodeWorkWhereInput | CodeWorkWhereInput[]
    OR?: CodeWorkWhereInput[]
    NOT?: CodeWorkWhereInput | CodeWorkWhereInput[]
    id?: StringFilter<"CodeWork"> | string
    title?: StringFilter<"CodeWork"> | string
    author?: StringFilter<"CodeWork"> | string
    sourceCode?: StringFilter<"CodeWork"> | string
    sha3Hash?: StringFilter<"CodeWork"> | string
    codeteiXml?: StringFilter<"CodeWork"> | string
    createdAt?: DateTimeFilter<"CodeWork"> | Date | string
    updatedAt?: DateTimeFilter<"CodeWork"> | Date | string
    explanations?: ExplanationListRelationFilter
    executions?: ExecutionListRelationFilter
  }

  export type CodeWorkOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    sourceCode?: SortOrder
    sha3Hash?: SortOrder
    codeteiXml?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    explanations?: ExplanationOrderByRelationAggregateInput
    executions?: ExecutionOrderByRelationAggregateInput
  }

  export type CodeWorkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sha3Hash?: string
    AND?: CodeWorkWhereInput | CodeWorkWhereInput[]
    OR?: CodeWorkWhereInput[]
    NOT?: CodeWorkWhereInput | CodeWorkWhereInput[]
    title?: StringFilter<"CodeWork"> | string
    author?: StringFilter<"CodeWork"> | string
    sourceCode?: StringFilter<"CodeWork"> | string
    codeteiXml?: StringFilter<"CodeWork"> | string
    createdAt?: DateTimeFilter<"CodeWork"> | Date | string
    updatedAt?: DateTimeFilter<"CodeWork"> | Date | string
    explanations?: ExplanationListRelationFilter
    executions?: ExecutionListRelationFilter
  }, "id" | "sha3Hash">

  export type CodeWorkOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    sourceCode?: SortOrder
    sha3Hash?: SortOrder
    codeteiXml?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CodeWorkCountOrderByAggregateInput
    _max?: CodeWorkMaxOrderByAggregateInput
    _min?: CodeWorkMinOrderByAggregateInput
  }

  export type CodeWorkScalarWhereWithAggregatesInput = {
    AND?: CodeWorkScalarWhereWithAggregatesInput | CodeWorkScalarWhereWithAggregatesInput[]
    OR?: CodeWorkScalarWhereWithAggregatesInput[]
    NOT?: CodeWorkScalarWhereWithAggregatesInput | CodeWorkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CodeWork"> | string
    title?: StringWithAggregatesFilter<"CodeWork"> | string
    author?: StringWithAggregatesFilter<"CodeWork"> | string
    sourceCode?: StringWithAggregatesFilter<"CodeWork"> | string
    sha3Hash?: StringWithAggregatesFilter<"CodeWork"> | string
    codeteiXml?: StringWithAggregatesFilter<"CodeWork"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CodeWork"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CodeWork"> | Date | string
  }

  export type ExplanationWhereInput = {
    AND?: ExplanationWhereInput | ExplanationWhereInput[]
    OR?: ExplanationWhereInput[]
    NOT?: ExplanationWhereInput | ExplanationWhereInput[]
    id?: StringFilter<"Explanation"> | string
    type?: StringFilter<"Explanation"> | string
    lineNumber?: IntNullableFilter<"Explanation"> | number | null
    content?: StringFilter<"Explanation"> | string
    agent?: StringFilter<"Explanation"> | string
    model?: StringNullableFilter<"Explanation"> | string | null
    confidence?: FloatNullableFilter<"Explanation"> | number | null
    understanding?: IntNullableFilter<"Explanation"> | number | null
    question?: StringNullableFilter<"Explanation"> | string | null
    codeWorkId?: StringFilter<"Explanation"> | string
    createdAt?: DateTimeFilter<"Explanation"> | Date | string
    updatedAt?: DateTimeFilter<"Explanation"> | Date | string
    codeWork?: XOR<CodeWorkRelationFilter, CodeWorkWhereInput>
  }

  export type ExplanationOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    lineNumber?: SortOrderInput | SortOrder
    content?: SortOrder
    agent?: SortOrder
    model?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    understanding?: SortOrderInput | SortOrder
    question?: SortOrderInput | SortOrder
    codeWorkId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codeWork?: CodeWorkOrderByWithRelationInput
  }

  export type ExplanationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExplanationWhereInput | ExplanationWhereInput[]
    OR?: ExplanationWhereInput[]
    NOT?: ExplanationWhereInput | ExplanationWhereInput[]
    type?: StringFilter<"Explanation"> | string
    lineNumber?: IntNullableFilter<"Explanation"> | number | null
    content?: StringFilter<"Explanation"> | string
    agent?: StringFilter<"Explanation"> | string
    model?: StringNullableFilter<"Explanation"> | string | null
    confidence?: FloatNullableFilter<"Explanation"> | number | null
    understanding?: IntNullableFilter<"Explanation"> | number | null
    question?: StringNullableFilter<"Explanation"> | string | null
    codeWorkId?: StringFilter<"Explanation"> | string
    createdAt?: DateTimeFilter<"Explanation"> | Date | string
    updatedAt?: DateTimeFilter<"Explanation"> | Date | string
    codeWork?: XOR<CodeWorkRelationFilter, CodeWorkWhereInput>
  }, "id">

  export type ExplanationOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    lineNumber?: SortOrderInput | SortOrder
    content?: SortOrder
    agent?: SortOrder
    model?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    understanding?: SortOrderInput | SortOrder
    question?: SortOrderInput | SortOrder
    codeWorkId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExplanationCountOrderByAggregateInput
    _avg?: ExplanationAvgOrderByAggregateInput
    _max?: ExplanationMaxOrderByAggregateInput
    _min?: ExplanationMinOrderByAggregateInput
    _sum?: ExplanationSumOrderByAggregateInput
  }

  export type ExplanationScalarWhereWithAggregatesInput = {
    AND?: ExplanationScalarWhereWithAggregatesInput | ExplanationScalarWhereWithAggregatesInput[]
    OR?: ExplanationScalarWhereWithAggregatesInput[]
    NOT?: ExplanationScalarWhereWithAggregatesInput | ExplanationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Explanation"> | string
    type?: StringWithAggregatesFilter<"Explanation"> | string
    lineNumber?: IntNullableWithAggregatesFilter<"Explanation"> | number | null
    content?: StringWithAggregatesFilter<"Explanation"> | string
    agent?: StringWithAggregatesFilter<"Explanation"> | string
    model?: StringNullableWithAggregatesFilter<"Explanation"> | string | null
    confidence?: FloatNullableWithAggregatesFilter<"Explanation"> | number | null
    understanding?: IntNullableWithAggregatesFilter<"Explanation"> | number | null
    question?: StringNullableWithAggregatesFilter<"Explanation"> | string | null
    codeWorkId?: StringWithAggregatesFilter<"Explanation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Explanation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Explanation"> | Date | string
  }

  export type ExecutionWhereInput = {
    AND?: ExecutionWhereInput | ExecutionWhereInput[]
    OR?: ExecutionWhereInput[]
    NOT?: ExecutionWhereInput | ExecutionWhereInput[]
    id?: StringFilter<"Execution"> | string
    type?: StringFilter<"Execution"> | string
    containerInfo?: StringNullableFilter<"Execution"> | string | null
    chainName?: StringNullableFilter<"Execution"> | string | null
    txId?: StringNullableFilter<"Execution"> | string | null
    status?: StringFilter<"Execution"> | string
    notes?: StringNullableFilter<"Execution"> | string | null
    executedAt?: DateTimeFilter<"Execution"> | Date | string
    codeWorkId?: StringFilter<"Execution"> | string
    createdAt?: DateTimeFilter<"Execution"> | Date | string
    codeWork?: XOR<CodeWorkRelationFilter, CodeWorkWhereInput>
  }

  export type ExecutionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    containerInfo?: SortOrderInput | SortOrder
    chainName?: SortOrderInput | SortOrder
    txId?: SortOrderInput | SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    executedAt?: SortOrder
    codeWorkId?: SortOrder
    createdAt?: SortOrder
    codeWork?: CodeWorkOrderByWithRelationInput
  }

  export type ExecutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExecutionWhereInput | ExecutionWhereInput[]
    OR?: ExecutionWhereInput[]
    NOT?: ExecutionWhereInput | ExecutionWhereInput[]
    type?: StringFilter<"Execution"> | string
    containerInfo?: StringNullableFilter<"Execution"> | string | null
    chainName?: StringNullableFilter<"Execution"> | string | null
    txId?: StringNullableFilter<"Execution"> | string | null
    status?: StringFilter<"Execution"> | string
    notes?: StringNullableFilter<"Execution"> | string | null
    executedAt?: DateTimeFilter<"Execution"> | Date | string
    codeWorkId?: StringFilter<"Execution"> | string
    createdAt?: DateTimeFilter<"Execution"> | Date | string
    codeWork?: XOR<CodeWorkRelationFilter, CodeWorkWhereInput>
  }, "id">

  export type ExecutionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    containerInfo?: SortOrderInput | SortOrder
    chainName?: SortOrderInput | SortOrder
    txId?: SortOrderInput | SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    executedAt?: SortOrder
    codeWorkId?: SortOrder
    createdAt?: SortOrder
    _count?: ExecutionCountOrderByAggregateInput
    _max?: ExecutionMaxOrderByAggregateInput
    _min?: ExecutionMinOrderByAggregateInput
  }

  export type ExecutionScalarWhereWithAggregatesInput = {
    AND?: ExecutionScalarWhereWithAggregatesInput | ExecutionScalarWhereWithAggregatesInput[]
    OR?: ExecutionScalarWhereWithAggregatesInput[]
    NOT?: ExecutionScalarWhereWithAggregatesInput | ExecutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Execution"> | string
    type?: StringWithAggregatesFilter<"Execution"> | string
    containerInfo?: StringNullableWithAggregatesFilter<"Execution"> | string | null
    chainName?: StringNullableWithAggregatesFilter<"Execution"> | string | null
    txId?: StringNullableWithAggregatesFilter<"Execution"> | string | null
    status?: StringWithAggregatesFilter<"Execution"> | string
    notes?: StringNullableWithAggregatesFilter<"Execution"> | string | null
    executedAt?: DateTimeWithAggregatesFilter<"Execution"> | Date | string
    codeWorkId?: StringWithAggregatesFilter<"Execution"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Execution"> | Date | string
  }

  export type CodeWorkCreateInput = {
    id?: string
    title: string
    author: string
    sourceCode: string
    sha3Hash: string
    codeteiXml: string
    createdAt?: Date | string
    updatedAt?: Date | string
    explanations?: ExplanationCreateNestedManyWithoutCodeWorkInput
    executions?: ExecutionCreateNestedManyWithoutCodeWorkInput
  }

  export type CodeWorkUncheckedCreateInput = {
    id?: string
    title: string
    author: string
    sourceCode: string
    sha3Hash: string
    codeteiXml: string
    createdAt?: Date | string
    updatedAt?: Date | string
    explanations?: ExplanationUncheckedCreateNestedManyWithoutCodeWorkInput
    executions?: ExecutionUncheckedCreateNestedManyWithoutCodeWorkInput
  }

  export type CodeWorkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    sha3Hash?: StringFieldUpdateOperationsInput | string
    codeteiXml?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    explanations?: ExplanationUpdateManyWithoutCodeWorkNestedInput
    executions?: ExecutionUpdateManyWithoutCodeWorkNestedInput
  }

  export type CodeWorkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    sha3Hash?: StringFieldUpdateOperationsInput | string
    codeteiXml?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    explanations?: ExplanationUncheckedUpdateManyWithoutCodeWorkNestedInput
    executions?: ExecutionUncheckedUpdateManyWithoutCodeWorkNestedInput
  }

  export type CodeWorkCreateManyInput = {
    id?: string
    title: string
    author: string
    sourceCode: string
    sha3Hash: string
    codeteiXml: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CodeWorkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    sha3Hash?: StringFieldUpdateOperationsInput | string
    codeteiXml?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodeWorkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    sha3Hash?: StringFieldUpdateOperationsInput | string
    codeteiXml?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplanationCreateInput = {
    id?: string
    type: string
    lineNumber?: number | null
    content: string
    agent?: string
    model?: string | null
    confidence?: number | null
    understanding?: number | null
    question?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codeWork: CodeWorkCreateNestedOneWithoutExplanationsInput
  }

  export type ExplanationUncheckedCreateInput = {
    id?: string
    type: string
    lineNumber?: number | null
    content: string
    agent?: string
    model?: string | null
    confidence?: number | null
    understanding?: number | null
    question?: string | null
    codeWorkId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExplanationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    lineNumber?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    agent?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    understanding?: NullableIntFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codeWork?: CodeWorkUpdateOneRequiredWithoutExplanationsNestedInput
  }

  export type ExplanationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    lineNumber?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    agent?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    understanding?: NullableIntFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    codeWorkId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplanationCreateManyInput = {
    id?: string
    type: string
    lineNumber?: number | null
    content: string
    agent?: string
    model?: string | null
    confidence?: number | null
    understanding?: number | null
    question?: string | null
    codeWorkId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExplanationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    lineNumber?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    agent?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    understanding?: NullableIntFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplanationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    lineNumber?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    agent?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    understanding?: NullableIntFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    codeWorkId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExecutionCreateInput = {
    id?: string
    type: string
    containerInfo?: string | null
    chainName?: string | null
    txId?: string | null
    status: string
    notes?: string | null
    executedAt?: Date | string
    createdAt?: Date | string
    codeWork: CodeWorkCreateNestedOneWithoutExecutionsInput
  }

  export type ExecutionUncheckedCreateInput = {
    id?: string
    type: string
    containerInfo?: string | null
    chainName?: string | null
    txId?: string | null
    status: string
    notes?: string | null
    executedAt?: Date | string
    codeWorkId: string
    createdAt?: Date | string
  }

  export type ExecutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    containerInfo?: NullableStringFieldUpdateOperationsInput | string | null
    chainName?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codeWork?: CodeWorkUpdateOneRequiredWithoutExecutionsNestedInput
  }

  export type ExecutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    containerInfo?: NullableStringFieldUpdateOperationsInput | string | null
    chainName?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codeWorkId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExecutionCreateManyInput = {
    id?: string
    type: string
    containerInfo?: string | null
    chainName?: string | null
    txId?: string | null
    status: string
    notes?: string | null
    executedAt?: Date | string
    codeWorkId: string
    createdAt?: Date | string
  }

  export type ExecutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    containerInfo?: NullableStringFieldUpdateOperationsInput | string | null
    chainName?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExecutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    containerInfo?: NullableStringFieldUpdateOperationsInput | string | null
    chainName?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codeWorkId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ExplanationListRelationFilter = {
    every?: ExplanationWhereInput
    some?: ExplanationWhereInput
    none?: ExplanationWhereInput
  }

  export type ExecutionListRelationFilter = {
    every?: ExecutionWhereInput
    some?: ExecutionWhereInput
    none?: ExecutionWhereInput
  }

  export type ExplanationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExecutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CodeWorkCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    sourceCode?: SortOrder
    sha3Hash?: SortOrder
    codeteiXml?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CodeWorkMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    sourceCode?: SortOrder
    sha3Hash?: SortOrder
    codeteiXml?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CodeWorkMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    sourceCode?: SortOrder
    sha3Hash?: SortOrder
    codeteiXml?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CodeWorkRelationFilter = {
    is?: CodeWorkWhereInput
    isNot?: CodeWorkWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ExplanationCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    lineNumber?: SortOrder
    content?: SortOrder
    agent?: SortOrder
    model?: SortOrder
    confidence?: SortOrder
    understanding?: SortOrder
    question?: SortOrder
    codeWorkId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExplanationAvgOrderByAggregateInput = {
    lineNumber?: SortOrder
    confidence?: SortOrder
    understanding?: SortOrder
  }

  export type ExplanationMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    lineNumber?: SortOrder
    content?: SortOrder
    agent?: SortOrder
    model?: SortOrder
    confidence?: SortOrder
    understanding?: SortOrder
    question?: SortOrder
    codeWorkId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExplanationMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    lineNumber?: SortOrder
    content?: SortOrder
    agent?: SortOrder
    model?: SortOrder
    confidence?: SortOrder
    understanding?: SortOrder
    question?: SortOrder
    codeWorkId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExplanationSumOrderByAggregateInput = {
    lineNumber?: SortOrder
    confidence?: SortOrder
    understanding?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ExecutionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    containerInfo?: SortOrder
    chainName?: SortOrder
    txId?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    executedAt?: SortOrder
    codeWorkId?: SortOrder
    createdAt?: SortOrder
  }

  export type ExecutionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    containerInfo?: SortOrder
    chainName?: SortOrder
    txId?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    executedAt?: SortOrder
    codeWorkId?: SortOrder
    createdAt?: SortOrder
  }

  export type ExecutionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    containerInfo?: SortOrder
    chainName?: SortOrder
    txId?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    executedAt?: SortOrder
    codeWorkId?: SortOrder
    createdAt?: SortOrder
  }

  export type ExplanationCreateNestedManyWithoutCodeWorkInput = {
    create?: XOR<ExplanationCreateWithoutCodeWorkInput, ExplanationUncheckedCreateWithoutCodeWorkInput> | ExplanationCreateWithoutCodeWorkInput[] | ExplanationUncheckedCreateWithoutCodeWorkInput[]
    connectOrCreate?: ExplanationCreateOrConnectWithoutCodeWorkInput | ExplanationCreateOrConnectWithoutCodeWorkInput[]
    createMany?: ExplanationCreateManyCodeWorkInputEnvelope
    connect?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
  }

  export type ExecutionCreateNestedManyWithoutCodeWorkInput = {
    create?: XOR<ExecutionCreateWithoutCodeWorkInput, ExecutionUncheckedCreateWithoutCodeWorkInput> | ExecutionCreateWithoutCodeWorkInput[] | ExecutionUncheckedCreateWithoutCodeWorkInput[]
    connectOrCreate?: ExecutionCreateOrConnectWithoutCodeWorkInput | ExecutionCreateOrConnectWithoutCodeWorkInput[]
    createMany?: ExecutionCreateManyCodeWorkInputEnvelope
    connect?: ExecutionWhereUniqueInput | ExecutionWhereUniqueInput[]
  }

  export type ExplanationUncheckedCreateNestedManyWithoutCodeWorkInput = {
    create?: XOR<ExplanationCreateWithoutCodeWorkInput, ExplanationUncheckedCreateWithoutCodeWorkInput> | ExplanationCreateWithoutCodeWorkInput[] | ExplanationUncheckedCreateWithoutCodeWorkInput[]
    connectOrCreate?: ExplanationCreateOrConnectWithoutCodeWorkInput | ExplanationCreateOrConnectWithoutCodeWorkInput[]
    createMany?: ExplanationCreateManyCodeWorkInputEnvelope
    connect?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
  }

  export type ExecutionUncheckedCreateNestedManyWithoutCodeWorkInput = {
    create?: XOR<ExecutionCreateWithoutCodeWorkInput, ExecutionUncheckedCreateWithoutCodeWorkInput> | ExecutionCreateWithoutCodeWorkInput[] | ExecutionUncheckedCreateWithoutCodeWorkInput[]
    connectOrCreate?: ExecutionCreateOrConnectWithoutCodeWorkInput | ExecutionCreateOrConnectWithoutCodeWorkInput[]
    createMany?: ExecutionCreateManyCodeWorkInputEnvelope
    connect?: ExecutionWhereUniqueInput | ExecutionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ExplanationUpdateManyWithoutCodeWorkNestedInput = {
    create?: XOR<ExplanationCreateWithoutCodeWorkInput, ExplanationUncheckedCreateWithoutCodeWorkInput> | ExplanationCreateWithoutCodeWorkInput[] | ExplanationUncheckedCreateWithoutCodeWorkInput[]
    connectOrCreate?: ExplanationCreateOrConnectWithoutCodeWorkInput | ExplanationCreateOrConnectWithoutCodeWorkInput[]
    upsert?: ExplanationUpsertWithWhereUniqueWithoutCodeWorkInput | ExplanationUpsertWithWhereUniqueWithoutCodeWorkInput[]
    createMany?: ExplanationCreateManyCodeWorkInputEnvelope
    set?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    disconnect?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    delete?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    connect?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    update?: ExplanationUpdateWithWhereUniqueWithoutCodeWorkInput | ExplanationUpdateWithWhereUniqueWithoutCodeWorkInput[]
    updateMany?: ExplanationUpdateManyWithWhereWithoutCodeWorkInput | ExplanationUpdateManyWithWhereWithoutCodeWorkInput[]
    deleteMany?: ExplanationScalarWhereInput | ExplanationScalarWhereInput[]
  }

  export type ExecutionUpdateManyWithoutCodeWorkNestedInput = {
    create?: XOR<ExecutionCreateWithoutCodeWorkInput, ExecutionUncheckedCreateWithoutCodeWorkInput> | ExecutionCreateWithoutCodeWorkInput[] | ExecutionUncheckedCreateWithoutCodeWorkInput[]
    connectOrCreate?: ExecutionCreateOrConnectWithoutCodeWorkInput | ExecutionCreateOrConnectWithoutCodeWorkInput[]
    upsert?: ExecutionUpsertWithWhereUniqueWithoutCodeWorkInput | ExecutionUpsertWithWhereUniqueWithoutCodeWorkInput[]
    createMany?: ExecutionCreateManyCodeWorkInputEnvelope
    set?: ExecutionWhereUniqueInput | ExecutionWhereUniqueInput[]
    disconnect?: ExecutionWhereUniqueInput | ExecutionWhereUniqueInput[]
    delete?: ExecutionWhereUniqueInput | ExecutionWhereUniqueInput[]
    connect?: ExecutionWhereUniqueInput | ExecutionWhereUniqueInput[]
    update?: ExecutionUpdateWithWhereUniqueWithoutCodeWorkInput | ExecutionUpdateWithWhereUniqueWithoutCodeWorkInput[]
    updateMany?: ExecutionUpdateManyWithWhereWithoutCodeWorkInput | ExecutionUpdateManyWithWhereWithoutCodeWorkInput[]
    deleteMany?: ExecutionScalarWhereInput | ExecutionScalarWhereInput[]
  }

  export type ExplanationUncheckedUpdateManyWithoutCodeWorkNestedInput = {
    create?: XOR<ExplanationCreateWithoutCodeWorkInput, ExplanationUncheckedCreateWithoutCodeWorkInput> | ExplanationCreateWithoutCodeWorkInput[] | ExplanationUncheckedCreateWithoutCodeWorkInput[]
    connectOrCreate?: ExplanationCreateOrConnectWithoutCodeWorkInput | ExplanationCreateOrConnectWithoutCodeWorkInput[]
    upsert?: ExplanationUpsertWithWhereUniqueWithoutCodeWorkInput | ExplanationUpsertWithWhereUniqueWithoutCodeWorkInput[]
    createMany?: ExplanationCreateManyCodeWorkInputEnvelope
    set?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    disconnect?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    delete?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    connect?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    update?: ExplanationUpdateWithWhereUniqueWithoutCodeWorkInput | ExplanationUpdateWithWhereUniqueWithoutCodeWorkInput[]
    updateMany?: ExplanationUpdateManyWithWhereWithoutCodeWorkInput | ExplanationUpdateManyWithWhereWithoutCodeWorkInput[]
    deleteMany?: ExplanationScalarWhereInput | ExplanationScalarWhereInput[]
  }

  export type ExecutionUncheckedUpdateManyWithoutCodeWorkNestedInput = {
    create?: XOR<ExecutionCreateWithoutCodeWorkInput, ExecutionUncheckedCreateWithoutCodeWorkInput> | ExecutionCreateWithoutCodeWorkInput[] | ExecutionUncheckedCreateWithoutCodeWorkInput[]
    connectOrCreate?: ExecutionCreateOrConnectWithoutCodeWorkInput | ExecutionCreateOrConnectWithoutCodeWorkInput[]
    upsert?: ExecutionUpsertWithWhereUniqueWithoutCodeWorkInput | ExecutionUpsertWithWhereUniqueWithoutCodeWorkInput[]
    createMany?: ExecutionCreateManyCodeWorkInputEnvelope
    set?: ExecutionWhereUniqueInput | ExecutionWhereUniqueInput[]
    disconnect?: ExecutionWhereUniqueInput | ExecutionWhereUniqueInput[]
    delete?: ExecutionWhereUniqueInput | ExecutionWhereUniqueInput[]
    connect?: ExecutionWhereUniqueInput | ExecutionWhereUniqueInput[]
    update?: ExecutionUpdateWithWhereUniqueWithoutCodeWorkInput | ExecutionUpdateWithWhereUniqueWithoutCodeWorkInput[]
    updateMany?: ExecutionUpdateManyWithWhereWithoutCodeWorkInput | ExecutionUpdateManyWithWhereWithoutCodeWorkInput[]
    deleteMany?: ExecutionScalarWhereInput | ExecutionScalarWhereInput[]
  }

  export type CodeWorkCreateNestedOneWithoutExplanationsInput = {
    create?: XOR<CodeWorkCreateWithoutExplanationsInput, CodeWorkUncheckedCreateWithoutExplanationsInput>
    connectOrCreate?: CodeWorkCreateOrConnectWithoutExplanationsInput
    connect?: CodeWorkWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CodeWorkUpdateOneRequiredWithoutExplanationsNestedInput = {
    create?: XOR<CodeWorkCreateWithoutExplanationsInput, CodeWorkUncheckedCreateWithoutExplanationsInput>
    connectOrCreate?: CodeWorkCreateOrConnectWithoutExplanationsInput
    upsert?: CodeWorkUpsertWithoutExplanationsInput
    connect?: CodeWorkWhereUniqueInput
    update?: XOR<XOR<CodeWorkUpdateToOneWithWhereWithoutExplanationsInput, CodeWorkUpdateWithoutExplanationsInput>, CodeWorkUncheckedUpdateWithoutExplanationsInput>
  }

  export type CodeWorkCreateNestedOneWithoutExecutionsInput = {
    create?: XOR<CodeWorkCreateWithoutExecutionsInput, CodeWorkUncheckedCreateWithoutExecutionsInput>
    connectOrCreate?: CodeWorkCreateOrConnectWithoutExecutionsInput
    connect?: CodeWorkWhereUniqueInput
  }

  export type CodeWorkUpdateOneRequiredWithoutExecutionsNestedInput = {
    create?: XOR<CodeWorkCreateWithoutExecutionsInput, CodeWorkUncheckedCreateWithoutExecutionsInput>
    connectOrCreate?: CodeWorkCreateOrConnectWithoutExecutionsInput
    upsert?: CodeWorkUpsertWithoutExecutionsInput
    connect?: CodeWorkWhereUniqueInput
    update?: XOR<XOR<CodeWorkUpdateToOneWithWhereWithoutExecutionsInput, CodeWorkUpdateWithoutExecutionsInput>, CodeWorkUncheckedUpdateWithoutExecutionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ExplanationCreateWithoutCodeWorkInput = {
    id?: string
    type: string
    lineNumber?: number | null
    content: string
    agent?: string
    model?: string | null
    confidence?: number | null
    understanding?: number | null
    question?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExplanationUncheckedCreateWithoutCodeWorkInput = {
    id?: string
    type: string
    lineNumber?: number | null
    content: string
    agent?: string
    model?: string | null
    confidence?: number | null
    understanding?: number | null
    question?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExplanationCreateOrConnectWithoutCodeWorkInput = {
    where: ExplanationWhereUniqueInput
    create: XOR<ExplanationCreateWithoutCodeWorkInput, ExplanationUncheckedCreateWithoutCodeWorkInput>
  }

  export type ExplanationCreateManyCodeWorkInputEnvelope = {
    data: ExplanationCreateManyCodeWorkInput | ExplanationCreateManyCodeWorkInput[]
    skipDuplicates?: boolean
  }

  export type ExecutionCreateWithoutCodeWorkInput = {
    id?: string
    type: string
    containerInfo?: string | null
    chainName?: string | null
    txId?: string | null
    status: string
    notes?: string | null
    executedAt?: Date | string
    createdAt?: Date | string
  }

  export type ExecutionUncheckedCreateWithoutCodeWorkInput = {
    id?: string
    type: string
    containerInfo?: string | null
    chainName?: string | null
    txId?: string | null
    status: string
    notes?: string | null
    executedAt?: Date | string
    createdAt?: Date | string
  }

  export type ExecutionCreateOrConnectWithoutCodeWorkInput = {
    where: ExecutionWhereUniqueInput
    create: XOR<ExecutionCreateWithoutCodeWorkInput, ExecutionUncheckedCreateWithoutCodeWorkInput>
  }

  export type ExecutionCreateManyCodeWorkInputEnvelope = {
    data: ExecutionCreateManyCodeWorkInput | ExecutionCreateManyCodeWorkInput[]
    skipDuplicates?: boolean
  }

  export type ExplanationUpsertWithWhereUniqueWithoutCodeWorkInput = {
    where: ExplanationWhereUniqueInput
    update: XOR<ExplanationUpdateWithoutCodeWorkInput, ExplanationUncheckedUpdateWithoutCodeWorkInput>
    create: XOR<ExplanationCreateWithoutCodeWorkInput, ExplanationUncheckedCreateWithoutCodeWorkInput>
  }

  export type ExplanationUpdateWithWhereUniqueWithoutCodeWorkInput = {
    where: ExplanationWhereUniqueInput
    data: XOR<ExplanationUpdateWithoutCodeWorkInput, ExplanationUncheckedUpdateWithoutCodeWorkInput>
  }

  export type ExplanationUpdateManyWithWhereWithoutCodeWorkInput = {
    where: ExplanationScalarWhereInput
    data: XOR<ExplanationUpdateManyMutationInput, ExplanationUncheckedUpdateManyWithoutCodeWorkInput>
  }

  export type ExplanationScalarWhereInput = {
    AND?: ExplanationScalarWhereInput | ExplanationScalarWhereInput[]
    OR?: ExplanationScalarWhereInput[]
    NOT?: ExplanationScalarWhereInput | ExplanationScalarWhereInput[]
    id?: StringFilter<"Explanation"> | string
    type?: StringFilter<"Explanation"> | string
    lineNumber?: IntNullableFilter<"Explanation"> | number | null
    content?: StringFilter<"Explanation"> | string
    agent?: StringFilter<"Explanation"> | string
    model?: StringNullableFilter<"Explanation"> | string | null
    confidence?: FloatNullableFilter<"Explanation"> | number | null
    understanding?: IntNullableFilter<"Explanation"> | number | null
    question?: StringNullableFilter<"Explanation"> | string | null
    codeWorkId?: StringFilter<"Explanation"> | string
    createdAt?: DateTimeFilter<"Explanation"> | Date | string
    updatedAt?: DateTimeFilter<"Explanation"> | Date | string
  }

  export type ExecutionUpsertWithWhereUniqueWithoutCodeWorkInput = {
    where: ExecutionWhereUniqueInput
    update: XOR<ExecutionUpdateWithoutCodeWorkInput, ExecutionUncheckedUpdateWithoutCodeWorkInput>
    create: XOR<ExecutionCreateWithoutCodeWorkInput, ExecutionUncheckedCreateWithoutCodeWorkInput>
  }

  export type ExecutionUpdateWithWhereUniqueWithoutCodeWorkInput = {
    where: ExecutionWhereUniqueInput
    data: XOR<ExecutionUpdateWithoutCodeWorkInput, ExecutionUncheckedUpdateWithoutCodeWorkInput>
  }

  export type ExecutionUpdateManyWithWhereWithoutCodeWorkInput = {
    where: ExecutionScalarWhereInput
    data: XOR<ExecutionUpdateManyMutationInput, ExecutionUncheckedUpdateManyWithoutCodeWorkInput>
  }

  export type ExecutionScalarWhereInput = {
    AND?: ExecutionScalarWhereInput | ExecutionScalarWhereInput[]
    OR?: ExecutionScalarWhereInput[]
    NOT?: ExecutionScalarWhereInput | ExecutionScalarWhereInput[]
    id?: StringFilter<"Execution"> | string
    type?: StringFilter<"Execution"> | string
    containerInfo?: StringNullableFilter<"Execution"> | string | null
    chainName?: StringNullableFilter<"Execution"> | string | null
    txId?: StringNullableFilter<"Execution"> | string | null
    status?: StringFilter<"Execution"> | string
    notes?: StringNullableFilter<"Execution"> | string | null
    executedAt?: DateTimeFilter<"Execution"> | Date | string
    codeWorkId?: StringFilter<"Execution"> | string
    createdAt?: DateTimeFilter<"Execution"> | Date | string
  }

  export type CodeWorkCreateWithoutExplanationsInput = {
    id?: string
    title: string
    author: string
    sourceCode: string
    sha3Hash: string
    codeteiXml: string
    createdAt?: Date | string
    updatedAt?: Date | string
    executions?: ExecutionCreateNestedManyWithoutCodeWorkInput
  }

  export type CodeWorkUncheckedCreateWithoutExplanationsInput = {
    id?: string
    title: string
    author: string
    sourceCode: string
    sha3Hash: string
    codeteiXml: string
    createdAt?: Date | string
    updatedAt?: Date | string
    executions?: ExecutionUncheckedCreateNestedManyWithoutCodeWorkInput
  }

  export type CodeWorkCreateOrConnectWithoutExplanationsInput = {
    where: CodeWorkWhereUniqueInput
    create: XOR<CodeWorkCreateWithoutExplanationsInput, CodeWorkUncheckedCreateWithoutExplanationsInput>
  }

  export type CodeWorkUpsertWithoutExplanationsInput = {
    update: XOR<CodeWorkUpdateWithoutExplanationsInput, CodeWorkUncheckedUpdateWithoutExplanationsInput>
    create: XOR<CodeWorkCreateWithoutExplanationsInput, CodeWorkUncheckedCreateWithoutExplanationsInput>
    where?: CodeWorkWhereInput
  }

  export type CodeWorkUpdateToOneWithWhereWithoutExplanationsInput = {
    where?: CodeWorkWhereInput
    data: XOR<CodeWorkUpdateWithoutExplanationsInput, CodeWorkUncheckedUpdateWithoutExplanationsInput>
  }

  export type CodeWorkUpdateWithoutExplanationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    sha3Hash?: StringFieldUpdateOperationsInput | string
    codeteiXml?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executions?: ExecutionUpdateManyWithoutCodeWorkNestedInput
  }

  export type CodeWorkUncheckedUpdateWithoutExplanationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    sha3Hash?: StringFieldUpdateOperationsInput | string
    codeteiXml?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executions?: ExecutionUncheckedUpdateManyWithoutCodeWorkNestedInput
  }

  export type CodeWorkCreateWithoutExecutionsInput = {
    id?: string
    title: string
    author: string
    sourceCode: string
    sha3Hash: string
    codeteiXml: string
    createdAt?: Date | string
    updatedAt?: Date | string
    explanations?: ExplanationCreateNestedManyWithoutCodeWorkInput
  }

  export type CodeWorkUncheckedCreateWithoutExecutionsInput = {
    id?: string
    title: string
    author: string
    sourceCode: string
    sha3Hash: string
    codeteiXml: string
    createdAt?: Date | string
    updatedAt?: Date | string
    explanations?: ExplanationUncheckedCreateNestedManyWithoutCodeWorkInput
  }

  export type CodeWorkCreateOrConnectWithoutExecutionsInput = {
    where: CodeWorkWhereUniqueInput
    create: XOR<CodeWorkCreateWithoutExecutionsInput, CodeWorkUncheckedCreateWithoutExecutionsInput>
  }

  export type CodeWorkUpsertWithoutExecutionsInput = {
    update: XOR<CodeWorkUpdateWithoutExecutionsInput, CodeWorkUncheckedUpdateWithoutExecutionsInput>
    create: XOR<CodeWorkCreateWithoutExecutionsInput, CodeWorkUncheckedCreateWithoutExecutionsInput>
    where?: CodeWorkWhereInput
  }

  export type CodeWorkUpdateToOneWithWhereWithoutExecutionsInput = {
    where?: CodeWorkWhereInput
    data: XOR<CodeWorkUpdateWithoutExecutionsInput, CodeWorkUncheckedUpdateWithoutExecutionsInput>
  }

  export type CodeWorkUpdateWithoutExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    sha3Hash?: StringFieldUpdateOperationsInput | string
    codeteiXml?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    explanations?: ExplanationUpdateManyWithoutCodeWorkNestedInput
  }

  export type CodeWorkUncheckedUpdateWithoutExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    sha3Hash?: StringFieldUpdateOperationsInput | string
    codeteiXml?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    explanations?: ExplanationUncheckedUpdateManyWithoutCodeWorkNestedInput
  }

  export type ExplanationCreateManyCodeWorkInput = {
    id?: string
    type: string
    lineNumber?: number | null
    content: string
    agent?: string
    model?: string | null
    confidence?: number | null
    understanding?: number | null
    question?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExecutionCreateManyCodeWorkInput = {
    id?: string
    type: string
    containerInfo?: string | null
    chainName?: string | null
    txId?: string | null
    status: string
    notes?: string | null
    executedAt?: Date | string
    createdAt?: Date | string
  }

  export type ExplanationUpdateWithoutCodeWorkInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    lineNumber?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    agent?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    understanding?: NullableIntFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplanationUncheckedUpdateWithoutCodeWorkInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    lineNumber?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    agent?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    understanding?: NullableIntFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplanationUncheckedUpdateManyWithoutCodeWorkInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    lineNumber?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    agent?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    understanding?: NullableIntFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExecutionUpdateWithoutCodeWorkInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    containerInfo?: NullableStringFieldUpdateOperationsInput | string | null
    chainName?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExecutionUncheckedUpdateWithoutCodeWorkInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    containerInfo?: NullableStringFieldUpdateOperationsInput | string | null
    chainName?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExecutionUncheckedUpdateManyWithoutCodeWorkInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    containerInfo?: NullableStringFieldUpdateOperationsInput | string | null
    chainName?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CodeWorkCountOutputTypeDefaultArgs instead
     */
    export type CodeWorkCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CodeWorkCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CodeWorkDefaultArgs instead
     */
    export type CodeWorkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CodeWorkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExplanationDefaultArgs instead
     */
    export type ExplanationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExplanationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExecutionDefaultArgs instead
     */
    export type ExecutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExecutionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}